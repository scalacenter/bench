#!/usr/bin/env bash

# poll github to check performance commands

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

############# Error

function report {
  message="polling service exception

polling service exception"

  ghi open -m "$message" -- $MONITOR_REPO

  exit 1
}

# trap report INT TERM EXIT
trap report EXIT

############# Config
cd $PROG_HOME
source bin/config

############# Variables

LAST_POLL=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

comment() {
  local pr=$1
  local commits=$(echo $2 | cut -d':' --output-delimiter=' ' -f1-)
  total=$(find jobs/ -name "*.job" | wc -l)
  running=$(find jobs/ -name "*.running" | wc -l)

  if [[ -z $commits ]]; then
     message="performance test scheduled: $total job(s) in queue, $running running."
  else
     message="performance test scheduled for $commits: $total job(s) in queue, $running running."
  fi

  ghi comment $pr -m "$message"  -- $MONITOR_REPO
}

############## Polling
while true; do
  output=/tmp/poll-comments
  wget https://api.github.com/repos/$MONITOR_REPO/issues/comments?since=$LAST_POLL -O $output
  LAST_POLL=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

  pulls=$(cat $output | jq -r '.[] | select((.body | test("^(re)?test performance please")) and (.html_url | contains("pull")) ) | [.html_url,  .body] | @tsv')

  while IFS= read -r line; do
    if [ "$line" != "" ]; then
      # https://github.com/lampepfl/dotty/pull/2970#issuecomment-321860528
      pr=$(echo $line | sed 's/^.*pull\/\([0-9]\{1,\}\).*/\1/')

      commits_info=$(printf $line | grep "test performance please" | sed 's/.*test performance please *:\(.*\)$/\1/' | sed 's/[^0-9a-z ]//g') # sanitize input
      if [[ $commits_info != *"test performance please"* ]]; then
        commits=$(echo $commits_info | cut -d' ' --output-delimiter=':' -f1-)
      else
        commits=""  # reset is important
      fi

      if [[ $line == "retest performance please"* ]]; then
        fresh=" -n"   # initial space is important!!
      else
        fresh=""
      fi


      if [[ "$pr" =~ ^[0-9]+$ ]]; then
        if [[ -z $commits ]]; then
           echo "bin/pull $fresh $pr" > jobs/pull-$pr.job
        else
           echo "bin/pull $fresh -c $commits $pr" > jobs/pull-$pr.job
        fi
        comment $pr $commits
      fi
    fi
  done <<< "$pulls"

  if [ -f stop-poll ]; then
    trap '' EXIT
    echo "stop polling"
    exit 0
  fi

  sleep $POLL_SLEEP
done
